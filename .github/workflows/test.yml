name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', 3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run unit tests
      run: |
        python -m pytest tests/unit -v --cov=src --cov-report=xml
      env:
        TESTING: true
        OPENAI_API_KEY: test-key
        ANTHROPIC_API_KEY: test-key
        GOOGLE_API_KEY: test-key
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration -v --tb=short
      env:
        TESTING: true
        OPENAI_API_KEY: test-key
        ANTHROPIC_API_KEY: test-key
        GOOGLE_API_KEY: test-key

  security-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install bandit safety
    
    - name: Run security tests
      run: |
        python -m pytest tests/security -v --tb=short -m security
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/
    
    - name: Run Safety check
      run: |
        safety check

  performance-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install locust memory-profiler
    
    - name: Run performance tests
      run: |
        python -m pytest tests/performance -v --tb=short -m performance
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: tests/performance/results/

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -r requirements.txt
    
    - name: Run Black
      run: black --check src/ tests/
    
    - name: Run isort
      run: isort --check-only src/ tests/
    
    - name: Run flake8
      run: flake8 src/ tests/
    
    - name: Run mypy
      run: mypy src/

  docker-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t autonomous-agent-test .
    
    - name: Run tests in Docker
      run: |
        docker run --rm \
          -e TESTING=true \
          -e OPENAI_API_KEY=test-key \
          -e ANTHROPIC_API_KEY=test-key \
          -e GOOGLE_API_KEY=test-key \
          autonomous-agent-test \
          python -m pytest tests/unit tests/integration -v

  test-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run core tests
      run: |
        python -m pytest tests/unit -k "not slow" -v
      env:
        TESTING: true
        OPENAI_API_KEY: test-key
        ANTHROPIC_API_KEY: test-key
        GOOGLE_API_KEY: test-key

  coverage-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run full test suite with coverage
      run: |
        python -m pytest tests/unit tests/integration \
          --cov=src \
          --cov-report=html \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80
      env:
        TESTING: true
        OPENAI_API_KEY: test-key
        ANTHROPIC_API_KEY: test-key
        GOOGLE_API_KEY: test-key
    
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests, lint-and-format]
    if: failure()
    
    steps:
    - name: Notify on failure
      run: |
        echo "Tests failed! Check the workflow for details."
        # Add notification logic here (Slack, email, etc.)